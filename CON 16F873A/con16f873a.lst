CCS PCM C Compiler, Version 5.010, 21806               20-nov.-16 18:56

               Filename:   E:\iWork\PROYECTOS_PIC\PROYECTOS TERMINADOS\TEMPERATURA CARROS\CON 16F873A\con16f873a.lst

               ROM used:   1865 words (46%)
                           Largest free fragment is 2048
               RAM used:   26 (14%) at main() level
                           91 (48%) worst case
               Stack used: 4 locations (2 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  07
0001:  MOVWF  0A
0002:  GOTO   71B
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  25
0008:  MOVF   7F,W
0009:  MOVWF  24
000A:  MOVF   0A,W
000B:  MOVWF  2B
000C:  CLRF   0A
000D:  SWAPF  24,F
000E:  MOVF   04,W
000F:  MOVWF  26
0010:  MOVF   20,W
0011:  MOVWF  27
0012:  MOVF   21,W
0013:  MOVWF  28
0014:  MOVF   22,W
0015:  MOVWF  29
0016:  MOVF   23,W
0017:  MOVWF  2A
0018:  BCF    03.7
0019:  BCF    03.5
001A:  MOVLW  8C
001B:  MOVWF  04
001C:  BTFSS  00.0
001D:  GOTO   020
001E:  BTFSC  0C.0
001F:  GOTO   031
0020:  MOVF   26,W
0021:  MOVWF  04
0022:  MOVF   27,W
0023:  MOVWF  20
0024:  MOVF   28,W
0025:  MOVWF  21
0026:  MOVF   29,W
0027:  MOVWF  22
0028:  MOVF   2A,W
0029:  MOVWF  23
002A:  MOVF   2B,W
002B:  MOVWF  0A
002C:  SWAPF  25,W
002D:  MOVWF  03
002E:  SWAPF  7F,F
002F:  SWAPF  7F,W
0030:  RETFIE
0031:  BCF    0A.3
0032:  GOTO   2D5
.................... #include <16F873A.h> 
.................... //////// Standard Header file for the PIC16F873A device //////////////// 
.................... #device PIC16F873A 
0033:  MOVF   66,W
0034:  BTFSC  03.2
0035:  GOTO   0A3
0036:  MOVWF  6E
0037:  MOVF   6A,W
0038:  BTFSC  03.2
0039:  GOTO   0A3
003A:  ADDWF  6E,F
003B:  BTFSC  03.0
003C:  GOTO   044
003D:  MOVLW  7F
003E:  SUBWF  6E,F
003F:  BTFSS  03.0
0040:  GOTO   0A3
0041:  BTFSC  03.2
0042:  GOTO   0A3
0043:  GOTO   048
0044:  MOVLW  81
0045:  ADDWF  6E,F
0046:  BTFSC  03.0
0047:  GOTO   0A3
0048:  MOVF   6E,W
0049:  MOVWF  20
004A:  CLRF   21
004B:  CLRF   22
004C:  CLRF   23
004D:  MOVF   67,W
004E:  MOVWF  72
004F:  BSF    72.7
0050:  MOVF   68,W
0051:  MOVWF  71
0052:  MOVF   69,W
0053:  MOVWF  70
0054:  MOVLW  18
0055:  MOVWF  6E
0056:  CLRF   6F
0057:  BTFSS  70.0
0058:  GOTO   071
0059:  MOVF   6D,W
005A:  ADDWF  23,F
005B:  BTFSS  03.0
005C:  GOTO   063
005D:  INCF   22,F
005E:  BTFSS  03.2
005F:  GOTO   063
0060:  INCF   21,F
0061:  BTFSC  03.2
0062:  BSF    6F.7
0063:  MOVF   6C,W
0064:  ADDWF  22,F
0065:  BTFSS  03.0
0066:  GOTO   06A
0067:  INCF   21,F
0068:  BTFSC  03.2
0069:  BSF    6F.7
006A:  MOVF   6B,W
006B:  MOVWF  68
006C:  BSF    68.7
006D:  MOVF   68,W
006E:  ADDWF  21,F
006F:  BTFSC  03.0
0070:  BSF    6F.7
0071:  RLF    6F,F
0072:  RRF    21,F
0073:  RRF    22,F
0074:  RRF    23,F
0075:  RRF    72,F
0076:  RRF    71,F
0077:  RRF    70,F
0078:  BCF    03.0
0079:  DECFSZ 6E,F
007A:  GOTO   056
007B:  MOVLW  01
007C:  ADDWF  20,F
007D:  BTFSC  03.0
007E:  GOTO   0A3
007F:  BTFSC  21.7
0080:  GOTO   088
0081:  RLF    72,F
0082:  RLF    23,F
0083:  RLF    22,F
0084:  RLF    21,F
0085:  DECF   20,F
0086:  BTFSC  03.2
0087:  GOTO   0A3
0088:  BTFSS  72.7
0089:  GOTO   099
008A:  INCF   23,F
008B:  BTFSS  03.2
008C:  GOTO   099
008D:  INCF   22,F
008E:  BTFSS  03.2
008F:  GOTO   099
0090:  INCF   21,F
0091:  BTFSS  03.2
0092:  GOTO   099
0093:  RRF    21,F
0094:  RRF    22,F
0095:  RRF    23,F
0096:  INCF   20,F
0097:  BTFSC  03.2
0098:  GOTO   0A3
0099:  MOVF   67,W
009A:  MOVWF  6F
009B:  MOVF   6B,W
009C:  XORWF  6F,F
009D:  BTFSS  6F.7
009E:  GOTO   0A1
009F:  BSF    21.7
00A0:  GOTO   0A7
00A1:  BCF    21.7
00A2:  GOTO   0A7
00A3:  CLRF   20
00A4:  CLRF   21
00A5:  CLRF   22
00A6:  CLRF   23
00A7:  RETURN
00A8:  MOVLW  80
00A9:  BTFSC  03.1
00AA:  XORWF  6F,F
00AB:  CLRF   74
00AC:  CLRF   75
00AD:  MOVF   6B,W
00AE:  MOVWF  73
00AF:  MOVF   6F,W
00B0:  XORWF  73,F
00B1:  MOVF   6A,W
00B2:  BTFSC  03.2
00B3:  GOTO   195
00B4:  MOVWF  72
00B5:  MOVWF  20
00B6:  MOVF   6E,W
00B7:  BTFSC  03.2
00B8:  GOTO   19E
00B9:  SUBWF  72,F
00BA:  BTFSC  03.2
00BB:  GOTO   13B
00BC:  BTFSS  03.0
00BD:  GOTO   0FA
00BE:  MOVF   6F,W
00BF:  MOVWF  78
00C0:  BSF    78.7
00C1:  MOVF   70,W
00C2:  MOVWF  77
00C3:  MOVF   71,W
00C4:  MOVWF  76
00C5:  CLRF   75
00C6:  BCF    03.0
00C7:  RRF    78,F
00C8:  RRF    77,F
00C9:  RRF    76,F
00CA:  RRF    75,F
00CB:  DECFSZ 72,F
00CC:  GOTO   0C5
00CD:  BTFSS  73.7
00CE:  GOTO   0D2
00CF:  BSF    74.0
00D0:  GOTO   1B2
00D1:  BCF    74.0
00D2:  BCF    72.0
00D3:  BSF    74.4
00D4:  MOVLW  6D
00D5:  MOVWF  04
00D6:  GOTO   1C7
00D7:  BCF    74.4
00D8:  BTFSC  73.7
00D9:  GOTO   0E4
00DA:  BTFSS  72.0
00DB:  GOTO   0EF
00DC:  RRF    78,F
00DD:  RRF    77,F
00DE:  RRF    76,F
00DF:  RRF    75,F
00E0:  INCF   20,F
00E1:  BTFSC  03.2
00E2:  GOTO   1AD
00E3:  GOTO   0EF
00E4:  BTFSC  78.7
00E5:  GOTO   0F2
00E6:  BCF    03.0
00E7:  RLF    75,F
00E8:  RLF    76,F
00E9:  RLF    77,F
00EA:  RLF    78,F
00EB:  DECF   20,F
00EC:  BTFSC  03.2
00ED:  GOTO   1AD
00EE:  GOTO   0E4
00EF:  BSF    74.6
00F0:  GOTO   15A
00F1:  BCF    74.6
00F2:  MOVF   6B,W
00F3:  MOVWF  73
00F4:  BTFSS  73.7
00F5:  GOTO   0F8
00F6:  BSF    78.7
00F7:  GOTO   1A6
00F8:  BCF    78.7
00F9:  GOTO   1A6
00FA:  MOVF   6E,W
00FB:  MOVWF  72
00FC:  MOVWF  20
00FD:  MOVF   6A,W
00FE:  SUBWF  72,F
00FF:  MOVF   6B,W
0100:  MOVWF  78
0101:  BSF    78.7
0102:  MOVF   6C,W
0103:  MOVWF  77
0104:  MOVF   6D,W
0105:  MOVWF  76
0106:  CLRF   75
0107:  BCF    03.0
0108:  RRF    78,F
0109:  RRF    77,F
010A:  RRF    76,F
010B:  RRF    75,F
010C:  DECFSZ 72,F
010D:  GOTO   106
010E:  BTFSS  73.7
010F:  GOTO   113
0110:  BSF    74.1
0111:  GOTO   1B2
0112:  BCF    74.1
0113:  BCF    72.0
0114:  BSF    74.5
0115:  MOVLW  71
0116:  MOVWF  04
0117:  GOTO   1C7
0118:  BCF    74.5
0119:  BTFSC  73.7
011A:  GOTO   125
011B:  BTFSS  72.0
011C:  GOTO   130
011D:  RRF    78,F
011E:  RRF    77,F
011F:  RRF    76,F
0120:  RRF    75,F
0121:  INCF   20,F
0122:  BTFSC  03.2
0123:  GOTO   1AD
0124:  GOTO   130
0125:  BTFSC  78.7
0126:  GOTO   133
0127:  BCF    03.0
0128:  RLF    75,F
0129:  RLF    76,F
012A:  RLF    77,F
012B:  RLF    78,F
012C:  DECF   20,F
012D:  BTFSC  03.2
012E:  GOTO   1AD
012F:  GOTO   125
0130:  BSF    74.7
0131:  GOTO   15A
0132:  BCF    74.7
0133:  MOVF   6F,W
0134:  MOVWF  73
0135:  BTFSS  73.7
0136:  GOTO   139
0137:  BSF    78.7
0138:  GOTO   1A6
0139:  BCF    78.7
013A:  GOTO   1A6
013B:  MOVF   6F,W
013C:  MOVWF  78
013D:  BSF    78.7
013E:  MOVF   70,W
013F:  MOVWF  77
0140:  MOVF   71,W
0141:  MOVWF  76
0142:  BTFSS  73.7
0143:  GOTO   148
0144:  BCF    78.7
0145:  BSF    74.2
0146:  GOTO   1B2
0147:  BCF    74.2
0148:  CLRF   75
0149:  BCF    72.0
014A:  MOVLW  6D
014B:  MOVWF  04
014C:  GOTO   1C7
014D:  BTFSC  73.7
014E:  GOTO   170
014F:  MOVF   6B,W
0150:  MOVWF  73
0151:  BTFSS  72.0
0152:  GOTO   15A
0153:  RRF    78,F
0154:  RRF    77,F
0155:  RRF    76,F
0156:  RRF    75,F
0157:  INCF   20,F
0158:  BTFSC  03.2
0159:  GOTO   1AD
015A:  BTFSS  75.7
015B:  GOTO   16B
015C:  INCF   76,F
015D:  BTFSS  03.2
015E:  GOTO   16B
015F:  INCF   77,F
0160:  BTFSS  03.2
0161:  GOTO   16B
0162:  INCF   78,F
0163:  BTFSS  03.2
0164:  GOTO   16B
0165:  RRF    78,F
0166:  RRF    77,F
0167:  RRF    76,F
0168:  INCF   20,F
0169:  BTFSC  03.2
016A:  GOTO   1AD
016B:  BTFSC  74.6
016C:  GOTO   0F1
016D:  BTFSC  74.7
016E:  GOTO   132
016F:  GOTO   18F
0170:  MOVLW  80
0171:  XORWF  78,F
0172:  BTFSS  78.7
0173:  GOTO   178
0174:  GOTO   1B2
0175:  MOVF   6F,W
0176:  MOVWF  73
0177:  GOTO   185
0178:  MOVF   6B,W
0179:  MOVWF  73
017A:  MOVF   78,F
017B:  BTFSS  03.2
017C:  GOTO   185
017D:  MOVF   77,F
017E:  BTFSS  03.2
017F:  GOTO   185
0180:  MOVF   76,F
0181:  BTFSS  03.2
0182:  GOTO   185
0183:  CLRF   20
0184:  GOTO   1A6
0185:  BTFSC  78.7
0186:  GOTO   18F
0187:  BCF    03.0
0188:  RLF    75,F
0189:  RLF    76,F
018A:  RLF    77,F
018B:  RLF    78,F
018C:  DECFSZ 20,F
018D:  GOTO   185
018E:  GOTO   1AD
018F:  BTFSS  73.7
0190:  GOTO   193
0191:  BSF    78.7
0192:  GOTO   1A6
0193:  BCF    78.7
0194:  GOTO   1A6
0195:  MOVF   6E,W
0196:  MOVWF  20
0197:  MOVF   6F,W
0198:  MOVWF  78
0199:  MOVF   70,W
019A:  MOVWF  77
019B:  MOVF   71,W
019C:  MOVWF  76
019D:  GOTO   1A6
019E:  MOVF   6A,W
019F:  MOVWF  20
01A0:  MOVF   6B,W
01A1:  MOVWF  78
01A2:  MOVF   6C,W
01A3:  MOVWF  77
01A4:  MOVF   6D,W
01A5:  MOVWF  76
01A6:  MOVF   78,W
01A7:  MOVWF  21
01A8:  MOVF   77,W
01A9:  MOVWF  22
01AA:  MOVF   76,W
01AB:  MOVWF  23
01AC:  GOTO   1E5
01AD:  CLRF   20
01AE:  CLRF   21
01AF:  CLRF   22
01B0:  CLRF   23
01B1:  GOTO   1E5
01B2:  CLRF   75
01B3:  COMF   76,F
01B4:  COMF   77,F
01B5:  COMF   78,F
01B6:  COMF   75,F
01B7:  INCF   75,F
01B8:  BTFSS  03.2
01B9:  GOTO   1C0
01BA:  INCF   76,F
01BB:  BTFSS  03.2
01BC:  GOTO   1C0
01BD:  INCF   77,F
01BE:  BTFSC  03.2
01BF:  INCF   78,F
01C0:  BTFSC  74.0
01C1:  GOTO   0D1
01C2:  BTFSC  74.1
01C3:  GOTO   112
01C4:  BTFSC  74.2
01C5:  GOTO   147
01C6:  GOTO   175
01C7:  MOVF   00,W
01C8:  ADDWF  76,F
01C9:  BTFSS  03.0
01CA:  GOTO   1D1
01CB:  INCF   77,F
01CC:  BTFSS  03.2
01CD:  GOTO   1D1
01CE:  INCF   78,F
01CF:  BTFSC  03.2
01D0:  BSF    72.0
01D1:  DECF   04,F
01D2:  MOVF   00,W
01D3:  ADDWF  77,F
01D4:  BTFSS  03.0
01D5:  GOTO   1D9
01D6:  INCF   78,F
01D7:  BTFSC  03.2
01D8:  BSF    72.0
01D9:  DECF   04,F
01DA:  MOVF   00,W
01DB:  BTFSS  00.7
01DC:  XORLW  80
01DD:  ADDWF  78,F
01DE:  BTFSC  03.0
01DF:  BSF    72.0
01E0:  BTFSC  74.4
01E1:  GOTO   0D7
01E2:  BTFSC  74.5
01E3:  GOTO   118
01E4:  GOTO   14D
01E5:  RETURN
01E6:  MOVF   6A,W
01E7:  BTFSC  03.2
01E8:  GOTO   2AB
01E9:  MOVWF  76
01EA:  MOVF   6E,W
01EB:  BTFSC  03.2
01EC:  GOTO   2AB
01ED:  SUBWF  76,F
01EE:  BTFSS  03.0
01EF:  GOTO   1F5
01F0:  MOVLW  7F
01F1:  ADDWF  76,F
01F2:  BTFSC  03.0
01F3:  GOTO   2AB
01F4:  GOTO   1FB
01F5:  MOVLW  81
01F6:  SUBWF  76,F
01F7:  BTFSS  03.0
01F8:  GOTO   2AB
01F9:  BTFSC  03.2
01FA:  GOTO   2AB
01FB:  MOVF   76,W
01FC:  MOVWF  20
01FD:  CLRF   21
01FE:  CLRF   22
01FF:  CLRF   23
0200:  CLRF   75
0201:  MOVF   6B,W
0202:  MOVWF  74
0203:  BSF    74.7
0204:  MOVF   6C,W
0205:  MOVWF  73
0206:  MOVF   6D,W
0207:  MOVWF  72
0208:  MOVLW  19
0209:  MOVWF  76
020A:  MOVF   71,W
020B:  SUBWF  72,F
020C:  BTFSC  03.0
020D:  GOTO   21E
020E:  MOVLW  01
020F:  SUBWF  73,F
0210:  BTFSC  03.0
0211:  GOTO   21E
0212:  SUBWF  74,F
0213:  BTFSC  03.0
0214:  GOTO   21E
0215:  SUBWF  75,F
0216:  BTFSC  03.0
0217:  GOTO   21E
0218:  INCF   75,F
0219:  INCF   74,F
021A:  INCF   73,F
021B:  MOVF   71,W
021C:  ADDWF  72,F
021D:  GOTO   250
021E:  MOVF   70,W
021F:  SUBWF  73,F
0220:  BTFSC  03.0
0221:  GOTO   239
0222:  MOVLW  01
0223:  SUBWF  74,F
0224:  BTFSC  03.0
0225:  GOTO   239
0226:  SUBWF  75,F
0227:  BTFSC  03.0
0228:  GOTO   239
0229:  INCF   75,F
022A:  INCF   74,F
022B:  MOVF   70,W
022C:  ADDWF  73,F
022D:  MOVF   71,W
022E:  ADDWF  72,F
022F:  BTFSS  03.0
0230:  GOTO   250
0231:  INCF   73,F
0232:  BTFSS  03.2
0233:  GOTO   250
0234:  INCF   74,F
0235:  BTFSS  03.2
0236:  GOTO   250
0237:  INCF   75,F
0238:  GOTO   250
0239:  MOVF   6F,W
023A:  IORLW  80
023B:  SUBWF  74,F
023C:  BTFSC  03.0
023D:  GOTO   24F
023E:  MOVLW  01
023F:  SUBWF  75,F
0240:  BTFSC  03.0
0241:  GOTO   24F
0242:  INCF   75,F
0243:  MOVF   6F,W
0244:  IORLW  80
0245:  ADDWF  74,F
0246:  MOVF   70,W
0247:  ADDWF  73,F
0248:  BTFSS  03.0
0249:  GOTO   22D
024A:  INCF   74,F
024B:  BTFSS  03.2
024C:  GOTO   22D
024D:  INCF   75,F
024E:  GOTO   22D
024F:  BSF    23.0
0250:  DECFSZ 76,F
0251:  GOTO   253
0252:  GOTO   25E
0253:  BCF    03.0
0254:  RLF    72,F
0255:  RLF    73,F
0256:  RLF    74,F
0257:  RLF    75,F
0258:  BCF    03.0
0259:  RLF    23,F
025A:  RLF    22,F
025B:  RLF    21,F
025C:  RLF    77,F
025D:  GOTO   20A
025E:  BTFSS  77.0
025F:  GOTO   266
0260:  BCF    03.0
0261:  RRF    21,F
0262:  RRF    22,F
0263:  RRF    23,F
0264:  RRF    77,F
0265:  GOTO   269
0266:  DECF   20,F
0267:  BTFSC  03.2
0268:  GOTO   2AB
0269:  BTFSC  77.7
026A:  GOTO   292
026B:  BCF    03.0
026C:  RLF    72,F
026D:  RLF    73,F
026E:  RLF    74,F
026F:  RLF    75,F
0270:  MOVF   71,W
0271:  SUBWF  72,F
0272:  BTFSC  03.0
0273:  GOTO   27E
0274:  MOVLW  01
0275:  SUBWF  73,F
0276:  BTFSC  03.0
0277:  GOTO   27E
0278:  SUBWF  74,F
0279:  BTFSC  03.0
027A:  GOTO   27E
027B:  SUBWF  75,F
027C:  BTFSS  03.0
027D:  GOTO   2A1
027E:  MOVF   70,W
027F:  SUBWF  73,F
0280:  BTFSC  03.0
0281:  GOTO   289
0282:  MOVLW  01
0283:  SUBWF  74,F
0284:  BTFSC  03.0
0285:  GOTO   289
0286:  SUBWF  75,F
0287:  BTFSS  03.0
0288:  GOTO   2A1
0289:  MOVF   6F,W
028A:  IORLW  80
028B:  SUBWF  74,F
028C:  BTFSC  03.0
028D:  GOTO   292
028E:  MOVLW  01
028F:  SUBWF  75,F
0290:  BTFSS  03.0
0291:  GOTO   2A1
0292:  INCF   23,F
0293:  BTFSS  03.2
0294:  GOTO   2A1
0295:  INCF   22,F
0296:  BTFSS  03.2
0297:  GOTO   2A1
0298:  INCF   21,F
0299:  BTFSS  03.2
029A:  GOTO   2A1
029B:  INCF   20,F
029C:  BTFSC  03.2
029D:  GOTO   2AB
029E:  RRF    21,F
029F:  RRF    22,F
02A0:  RRF    23,F
02A1:  MOVF   6B,W
02A2:  MOVWF  76
02A3:  MOVF   6F,W
02A4:  XORWF  76,F
02A5:  BTFSS  76.7
02A6:  GOTO   2A9
02A7:  BSF    21.7
02A8:  GOTO   2AF
02A9:  BCF    21.7
02AA:  GOTO   2AF
02AB:  CLRF   20
02AC:  CLRF   21
02AD:  CLRF   22
02AE:  CLRF   23
02AF:  RETURN
02B0:  MOVLW  8E
02B1:  MOVWF  20
02B2:  MOVF   67,W
02B3:  MOVWF  21
02B4:  MOVF   66,W
02B5:  MOVWF  22
02B6:  CLRF   23
02B7:  BTFSS  67.7
02B8:  GOTO   2BE
02B9:  COMF   21,F
02BA:  COMF   22,F
02BB:  INCF   22,F
02BC:  BTFSC  03.2
02BD:  INCF   21,F
02BE:  MOVF   21,F
02BF:  BTFSS  03.2
02C0:  GOTO   2CB
02C1:  MOVF   22,W
02C2:  MOVWF  21
02C3:  CLRF   22
02C4:  MOVLW  08
02C5:  SUBWF  20,F
02C6:  MOVF   21,F
02C7:  BTFSS  03.2
02C8:  GOTO   2CB
02C9:  CLRF   20
02CA:  GOTO   2D4
02CB:  BCF    03.0
02CC:  BTFSC  21.7
02CD:  GOTO   2D2
02CE:  RLF    22,F
02CF:  RLF    21,F
02D0:  DECF   20,F
02D1:  GOTO   2CB
02D2:  BTFSS  67.7
02D3:  BCF    21.7
02D4:  RETURN
*
02FC:  MOVLW  8E
02FD:  MOVWF  20
02FE:  MOVF   4E,W
02FF:  MOVWF  21
0300:  MOVF   4D,W
0301:  MOVWF  22
0302:  CLRF   23
0303:  MOVF   21,F
0304:  BTFSS  03.2
0305:  GOTO   310
0306:  MOVF   22,W
0307:  MOVWF  21
0308:  CLRF   22
0309:  MOVLW  08
030A:  SUBWF  20,F
030B:  MOVF   21,F
030C:  BTFSS  03.2
030D:  GOTO   310
030E:  CLRF   20
030F:  GOTO   318
0310:  BCF    03.0
0311:  BTFSC  21.7
0312:  GOTO   317
0313:  RLF    22,F
0314:  RLF    21,F
0315:  DECF   20,F
0316:  GOTO   310
0317:  BCF    21.7
*
03AD:  MOVF   67,W
03AE:  MOVWF  6E
03AF:  MOVF   6B,W
03B0:  XORWF  6E,F
03B1:  BTFSS  6E.7
03B2:  GOTO   3B8
03B3:  BCF    03.2
03B4:  BCF    03.0
03B5:  BTFSC  67.7
03B6:  BSF    03.0
03B7:  GOTO   3EB
03B8:  MOVF   67,W
03B9:  MOVWF  6E
03BA:  MOVF   6A,W
03BB:  MOVWF  6F
03BC:  MOVF   66,W
03BD:  SUBWF  6F,F
03BE:  BTFSC  03.2
03BF:  GOTO   3C6
03C0:  BTFSS  6E.7
03C1:  GOTO   3EB
03C2:  MOVF   03,W
03C3:  XORLW  01
03C4:  MOVWF  03
03C5:  GOTO   3EB
03C6:  MOVF   6B,W
03C7:  MOVWF  6F
03C8:  MOVF   67,W
03C9:  SUBWF  6F,F
03CA:  BTFSC  03.2
03CB:  GOTO   3D2
03CC:  BTFSS  6E.7
03CD:  GOTO   3EB
03CE:  MOVF   03,W
03CF:  XORLW  01
03D0:  MOVWF  03
03D1:  GOTO   3EB
03D2:  MOVF   6C,W
03D3:  MOVWF  6F
03D4:  MOVF   68,W
03D5:  SUBWF  6F,F
03D6:  BTFSC  03.2
03D7:  GOTO   3DE
03D8:  BTFSS  6E.7
03D9:  GOTO   3EB
03DA:  MOVF   03,W
03DB:  XORLW  01
03DC:  MOVWF  03
03DD:  GOTO   3EB
03DE:  MOVF   6D,W
03DF:  MOVWF  6F
03E0:  MOVF   69,W
03E1:  SUBWF  6F,F
03E2:  BTFSC  03.2
03E3:  GOTO   3EA
03E4:  BTFSS  6E.7
03E5:  GOTO   3EB
03E6:  MOVF   03,W
03E7:  XORLW  01
03E8:  MOVWF  03
03E9:  GOTO   3EB
03EA:  BCF    03.0
*
05E1:  MOVLW  8E
05E2:  MOVWF  20
05E3:  MOVF   3D,W
05E4:  SUBWF  20,F
05E5:  MOVF   3E,W
05E6:  MOVWF  22
05E7:  MOVF   3F,W
05E8:  MOVWF  21
05E9:  BSF    22.7
05EA:  MOVF   20,F
05EB:  BTFSC  03.2
05EC:  GOTO   5F8
05ED:  BCF    03.0
05EE:  MOVF   22,F
05EF:  BTFSS  03.2
05F0:  GOTO   5F4
05F1:  MOVF   21,F
05F2:  BTFSC  03.2
05F3:  GOTO   5F8
05F4:  RRF    22,F
05F5:  RRF    21,F
05F6:  DECFSZ 20,F
05F7:  GOTO   5ED
05F8:  BTFSS  3E.7
05F9:  GOTO   5FF
05FA:  COMF   21,F
05FB:  COMF   22,F
05FC:  INCF   21,F
05FD:  BTFSC  03.2
05FE:  INCF   22,F
*
0637:  MOVF   3B,W
0638:  CLRF   21
0639:  SUBWF  3A,W
063A:  BTFSC  03.0
063B:  GOTO   63F
063C:  MOVF   3A,W
063D:  MOVWF  20
063E:  GOTO   64B
063F:  CLRF   20
0640:  MOVLW  08
0641:  MOVWF  3C
0642:  RLF    3A,F
0643:  RLF    20,F
0644:  MOVF   3B,W
0645:  SUBWF  20,W
0646:  BTFSC  03.0
0647:  MOVWF  20
0648:  RLF    21,F
0649:  DECFSZ 3C,F
064A:  GOTO   642
064B:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=8MHz) 
*
0624:  MOVLW  3A
0625:  MOVWF  04
0626:  MOVF   00,W
0627:  BTFSC  03.2
0628:  GOTO   636
0629:  MOVLW  02
062A:  MOVWF  21
062B:  CLRF   20
062C:  DECFSZ 20,F
062D:  GOTO   62C
062E:  DECFSZ 21,F
062F:  GOTO   62B
0630:  MOVLW  97
0631:  MOVWF  20
0632:  DECFSZ 20,F
0633:  GOTO   632
0634:  DECFSZ 00,F
0635:  GOTO   629
0636:  RETURN
.................... #use FIXED_IO( B_outputs=PIN_B7,PIN_B6,PIN_B5,PIN_B4,PIN_B3,PIN_B2,PIN_B1,PIN_B0 ) 
.................... #use FIXED_IO( C_outputs=PIN_C1,PIN_C0 ) 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1) 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
0398:  MOVF   54,W
0399:  MOVWF  58
039A:  MOVF   53,W
039B:  MOVWF  57
039C:  MOVF   52,W
039D:  MOVWF  56
039E:  MOVF   51,W
039F:  MOVWF  55
....................  
....................    if (y != 1.0) 
03A0:  MOVF   58,W
03A1:  MOVWF  69
03A2:  MOVF   57,W
03A3:  MOVWF  68
03A4:  MOVF   56,W
03A5:  MOVWF  67
03A6:  MOVF   55,W
03A7:  MOVWF  66
03A8:  CLRF   6D
03A9:  CLRF   6C
03AA:  CLRF   6B
03AB:  MOVLW  7F
03AC:  MOVWF  6A
*
03EB:  BTFSC  03.2
03EC:  GOTO   562
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
03ED:  MOVLW  55
03EE:  MOVWF  66
03EF:  MOVWF  04
03F0:  MOVLW  7E
03F1:  MOVWF  00
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
03F2:  BSF    03.1
03F3:  MOVF   58,W
03F4:  MOVWF  6D
03F5:  MOVF   57,W
03F6:  MOVWF  6C
03F7:  MOVF   56,W
03F8:  MOVWF  6B
03F9:  MOVF   55,W
03FA:  MOVWF  6A
03FB:  CLRF   71
03FC:  CLRF   70
03FD:  CLRF   6F
03FE:  MOVLW  7F
03FF:  MOVWF  6E
0400:  CALL   0A8
0401:  MOVF   23,W
0402:  MOVWF  69
0403:  MOVF   22,W
0404:  MOVWF  68
0405:  MOVF   21,W
0406:  MOVWF  67
0407:  MOVF   20,W
0408:  MOVWF  66
0409:  BCF    03.1
040A:  MOVF   58,W
040B:  MOVWF  6D
040C:  MOVF   57,W
040D:  MOVWF  6C
040E:  MOVF   56,W
040F:  MOVWF  6B
0410:  MOVF   55,W
0411:  MOVWF  6A
0412:  CLRF   71
0413:  CLRF   70
0414:  CLRF   6F
0415:  MOVLW  7F
0416:  MOVWF  6E
0417:  CALL   0A8
0418:  MOVF   69,W
0419:  MOVWF  6D
041A:  MOVF   68,W
041B:  MOVWF  6C
041C:  MOVF   67,W
041D:  MOVWF  6B
041E:  MOVF   66,W
041F:  MOVWF  6A
0420:  MOVF   23,W
0421:  MOVWF  71
0422:  MOVF   22,W
0423:  MOVWF  70
0424:  MOVF   21,W
0425:  MOVWF  6F
0426:  MOVF   20,W
0427:  MOVWF  6E
0428:  CALL   1E6
0429:  MOVF   23,W
042A:  MOVWF  58
042B:  MOVF   22,W
042C:  MOVWF  57
042D:  MOVF   21,W
042E:  MOVWF  56
042F:  MOVF   20,W
0430:  MOVWF  55
....................  
....................       y2=y*y; 
0431:  MOVF   58,W
0432:  MOVWF  69
0433:  MOVF   57,W
0434:  MOVWF  68
0435:  MOVF   56,W
0436:  MOVWF  67
0437:  MOVF   55,W
0438:  MOVWF  66
0439:  MOVF   58,W
043A:  MOVWF  6D
043B:  MOVF   57,W
043C:  MOVWF  6C
043D:  MOVF   56,W
043E:  MOVWF  6B
043F:  MOVF   55,W
0440:  MOVWF  6A
0441:  CALL   033
0442:  MOVF   23,W
0443:  MOVWF  64
0444:  MOVF   22,W
0445:  MOVWF  63
0446:  MOVF   21,W
0447:  MOVWF  62
0448:  MOVF   20,W
0449:  MOVWF  61
....................  
....................       res = pl[0]*y2 + pl[1]; 
044A:  MOVLW  99
044B:  MOVWF  69
044C:  MOVLW  47
044D:  MOVWF  68
044E:  MOVLW  8A
044F:  MOVWF  67
0450:  MOVLW  7F
0451:  MOVWF  66
0452:  MOVF   64,W
0453:  MOVWF  6D
0454:  MOVF   63,W
0455:  MOVWF  6C
0456:  MOVF   62,W
0457:  MOVWF  6B
0458:  MOVF   61,W
0459:  MOVWF  6A
045A:  CALL   033
045B:  MOVF   23,W
045C:  MOVWF  69
045D:  MOVF   22,W
045E:  MOVWF  68
045F:  MOVF   21,W
0460:  MOVWF  67
0461:  MOVF   20,W
0462:  MOVWF  66
0463:  BCF    03.1
0464:  MOVF   23,W
0465:  MOVWF  6D
0466:  MOVF   22,W
0467:  MOVWF  6C
0468:  MOVF   21,W
0469:  MOVWF  6B
046A:  MOVF   20,W
046B:  MOVWF  6A
046C:  CLRF   71
046D:  CLRF   70
046E:  CLRF   6F
046F:  MOVLW  80
0470:  MOVWF  6E
0471:  CALL   0A8
0472:  MOVF   23,W
0473:  MOVWF  5C
0474:  MOVF   22,W
0475:  MOVWF  5B
0476:  MOVF   21,W
0477:  MOVWF  5A
0478:  MOVF   20,W
0479:  MOVWF  59
....................  
....................       r = ql[0]*y2 + ql[1]; 
047A:  MOVLW  4C
047B:  MOVWF  69
047C:  MOVLW  F3
047D:  MOVWF  68
047E:  MOVLW  3A
047F:  MOVWF  67
0480:  MOVLW  7B
0481:  MOVWF  66
0482:  MOVF   64,W
0483:  MOVWF  6D
0484:  MOVF   63,W
0485:  MOVWF  6C
0486:  MOVF   62,W
0487:  MOVWF  6B
0488:  MOVF   61,W
0489:  MOVWF  6A
048A:  CALL   033
048B:  MOVF   23,W
048C:  MOVWF  69
048D:  MOVF   22,W
048E:  MOVWF  68
048F:  MOVF   21,W
0490:  MOVWF  67
0491:  MOVF   20,W
0492:  MOVWF  66
0493:  BCF    03.1
0494:  MOVF   23,W
0495:  MOVWF  6D
0496:  MOVF   22,W
0497:  MOVWF  6C
0498:  MOVF   21,W
0499:  MOVWF  6B
049A:  MOVF   20,W
049B:  MOVWF  6A
049C:  MOVLW  2B
049D:  MOVWF  71
049E:  MOVLW  9D
049F:  MOVWF  70
04A0:  MOVLW  DF
04A1:  MOVWF  6F
04A2:  MOVLW  7E
04A3:  MOVWF  6E
04A4:  CALL   0A8
04A5:  MOVF   23,W
04A6:  MOVWF  60
04A7:  MOVF   22,W
04A8:  MOVWF  5F
04A9:  MOVF   21,W
04AA:  MOVWF  5E
04AB:  MOVF   20,W
04AC:  MOVWF  5D
....................       r = r*y2 + 1.0; 
04AD:  MOVF   60,W
04AE:  MOVWF  69
04AF:  MOVF   5F,W
04B0:  MOVWF  68
04B1:  MOVF   5E,W
04B2:  MOVWF  67
04B3:  MOVF   5D,W
04B4:  MOVWF  66
04B5:  MOVF   64,W
04B6:  MOVWF  6D
04B7:  MOVF   63,W
04B8:  MOVWF  6C
04B9:  MOVF   62,W
04BA:  MOVWF  6B
04BB:  MOVF   61,W
04BC:  MOVWF  6A
04BD:  CALL   033
04BE:  MOVF   23,W
04BF:  MOVWF  69
04C0:  MOVF   22,W
04C1:  MOVWF  68
04C2:  MOVF   21,W
04C3:  MOVWF  67
04C4:  MOVF   20,W
04C5:  MOVWF  66
04C6:  BCF    03.1
04C7:  MOVF   23,W
04C8:  MOVWF  6D
04C9:  MOVF   22,W
04CA:  MOVWF  6C
04CB:  MOVF   21,W
04CC:  MOVWF  6B
04CD:  MOVF   20,W
04CE:  MOVWF  6A
04CF:  CLRF   71
04D0:  CLRF   70
04D1:  CLRF   6F
04D2:  MOVLW  7F
04D3:  MOVWF  6E
04D4:  CALL   0A8
04D5:  MOVF   23,W
04D6:  MOVWF  60
04D7:  MOVF   22,W
04D8:  MOVWF  5F
04D9:  MOVF   21,W
04DA:  MOVWF  5E
04DB:  MOVF   20,W
04DC:  MOVWF  5D
....................  
....................       res = y*res/r; 
04DD:  MOVF   58,W
04DE:  MOVWF  69
04DF:  MOVF   57,W
04E0:  MOVWF  68
04E1:  MOVF   56,W
04E2:  MOVWF  67
04E3:  MOVF   55,W
04E4:  MOVWF  66
04E5:  MOVF   5C,W
04E6:  MOVWF  6D
04E7:  MOVF   5B,W
04E8:  MOVWF  6C
04E9:  MOVF   5A,W
04EA:  MOVWF  6B
04EB:  MOVF   59,W
04EC:  MOVWF  6A
04ED:  CALL   033
04EE:  MOVF   23,W
04EF:  MOVWF  69
04F0:  MOVF   22,W
04F1:  MOVWF  68
04F2:  MOVF   21,W
04F3:  MOVWF  67
04F4:  MOVF   20,W
04F5:  MOVWF  66
04F6:  MOVF   23,W
04F7:  MOVWF  6D
04F8:  MOVF   22,W
04F9:  MOVWF  6C
04FA:  MOVF   21,W
04FB:  MOVWF  6B
04FC:  MOVF   20,W
04FD:  MOVWF  6A
04FE:  MOVF   60,W
04FF:  MOVWF  71
0500:  MOVF   5F,W
0501:  MOVWF  70
0502:  MOVF   5E,W
0503:  MOVWF  6F
0504:  MOVF   5D,W
0505:  MOVWF  6E
0506:  CALL   1E6
0507:  MOVF   23,W
0508:  MOVWF  5C
0509:  MOVF   22,W
050A:  MOVWF  5B
050B:  MOVF   21,W
050C:  MOVWF  5A
050D:  MOVF   20,W
050E:  MOVWF  59
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
050F:  MOVLW  51
0510:  MOVWF  66
0511:  MOVWF  04
0512:  MOVLW  7E
0513:  SUBWF  00,W
0514:  MOVWF  65
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
0515:  BTFSS  65.7
0516:  GOTO   528
....................          r = -(float32)-n; 
0517:  MOVF   65,W
0518:  SUBLW  00
0519:  CLRF   67
051A:  MOVWF  66
051B:  BTFSC  66.7
051C:  DECF   67,F
051D:  CALL   2B0
051E:  MOVF   20,W
051F:  MOVWF  5D
0520:  MOVF   21,W
0521:  XORLW  80
0522:  MOVWF  5E
0523:  MOVF   22,W
0524:  MOVWF  5F
0525:  MOVF   23,W
0526:  MOVWF  60
0527:  GOTO   536
....................       else 
....................          r = (float32)n; 
0528:  CLRF   67
0529:  MOVF   65,W
052A:  MOVWF  66
052B:  BTFSC  66.7
052C:  DECF   67,F
052D:  CALL   2B0
052E:  MOVF   23,W
052F:  MOVWF  60
0530:  MOVF   22,W
0531:  MOVWF  5F
0532:  MOVF   21,W
0533:  MOVWF  5E
0534:  MOVF   20,W
0535:  MOVWF  5D
....................  
....................       res += r*LN2; 
0536:  MOVF   60,W
0537:  MOVWF  69
0538:  MOVF   5F,W
0539:  MOVWF  68
053A:  MOVF   5E,W
053B:  MOVWF  67
053C:  MOVF   5D,W
053D:  MOVWF  66
053E:  MOVLW  18
053F:  MOVWF  6D
0540:  MOVLW  72
0541:  MOVWF  6C
0542:  MOVLW  31
0543:  MOVWF  6B
0544:  MOVLW  7E
0545:  MOVWF  6A
0546:  CALL   033
0547:  BCF    03.1
0548:  MOVF   5C,W
0549:  MOVWF  6D
054A:  MOVF   5B,W
054B:  MOVWF  6C
054C:  MOVF   5A,W
054D:  MOVWF  6B
054E:  MOVF   59,W
054F:  MOVWF  6A
0550:  MOVF   23,W
0551:  MOVWF  71
0552:  MOVF   22,W
0553:  MOVWF  70
0554:  MOVF   21,W
0555:  MOVWF  6F
0556:  MOVF   20,W
0557:  MOVWF  6E
0558:  CALL   0A8
0559:  MOVF   23,W
055A:  MOVWF  5C
055B:  MOVF   22,W
055C:  MOVWF  5B
055D:  MOVF   21,W
055E:  MOVWF  5A
055F:  MOVF   20,W
0560:  MOVWF  59
....................    } 
0561:  GOTO   566
....................  
....................    else 
....................       res = 0.0; 
0562:  CLRF   5C
0563:  CLRF   5B
0564:  CLRF   5A
0565:  CLRF   59
....................  
....................    return(res); 
0566:  MOVF   59,W
0567:  MOVWF  20
0568:  MOVF   5A,W
0569:  MOVWF  21
056A:  MOVF   5B,W
056B:  MOVWF  22
056C:  MOVF   5C,W
056D:  MOVWF  23
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////////////// 
.................... #define To        298.15      // 
.................... #define Ro        15000.00    // 
.................... #define B         4500.0      // 
.................... #define serialR   5000.00     // 
....................                               // 
.................... #include "NTC.h"              // 
....................  
.................... /*//////////////////////////////////////// 
.................... //   #define To -> 298.15?K            // 
.................... //   #define Ro -> R nominal del ntc     // 
.................... //   #define B  -> Constante del metal   // 
.................... //   #define serialR -> R en serie      // 
.................... ////////////////////////////////////////*/    
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
....................    float getTempCelsius(void) 
*
02E1:  CLRF   40
02E2:  CLRF   3F
02E3:  CLRF   3E
02E4:  CLRF   3D
02E5:  CLRF   44
02E6:  CLRF   43
02E7:  CLRF   42
02E8:  CLRF   41
02E9:  CLRF   48
02EA:  CLRF   47
02EB:  CLRF   46
02EC:  CLRF   45
02ED:  CLRF   4C
02EE:  CLRF   4B
02EF:  CLRF   4A
02F0:  CLRF   49
....................    { 
....................       //Variables 
....................       float Vx    =0; 
....................       float Rx    =0; 
....................       float temp  =0;   
....................       float y     =0; 
....................       //Leer y calcular caida de voltaje 
....................       Vx = read_adc(); 
02F1:  BSF    1F.2
02F2:  BTFSC  1F.2
02F3:  GOTO   2F2
02F4:  MOVF   1E,W
02F5:  MOVWF  23
02F6:  BSF    03.5
02F7:  MOVF   1E,W
02F8:  BCF    03.5
02F9:  MOVWF  4D
02FA:  MOVF   23,W
02FB:  MOVWF  4E
*
0318:  MOVF   23,W
0319:  MOVWF  40
031A:  MOVF   22,W
031B:  MOVWF  3F
031C:  MOVF   21,W
031D:  MOVWF  3E
031E:  MOVF   20,W
031F:  MOVWF  3D
....................       Vx = Vx*(5.00/1024.00) ; 
0320:  MOVF   40,W
0321:  MOVWF  69
0322:  MOVF   3F,W
0323:  MOVWF  68
0324:  MOVF   3E,W
0325:  MOVWF  67
0326:  MOVF   3D,W
0327:  MOVWF  66
0328:  CLRF   6D
0329:  CLRF   6C
032A:  MOVLW  20
032B:  MOVWF  6B
032C:  MOVLW  77
032D:  MOVWF  6A
032E:  CALL   033
032F:  MOVF   23,W
0330:  MOVWF  40
0331:  MOVF   22,W
0332:  MOVWF  3F
0333:  MOVF   21,W
0334:  MOVWF  3E
0335:  MOVF   20,W
0336:  MOVWF  3D
....................        
....................       //Calcular resistencia del ntc 
....................       Rx = ( Vx * serialR ) / ( 5.00 - Vx ) ;  
0337:  MOVF   40,W
0338:  MOVWF  69
0339:  MOVF   3F,W
033A:  MOVWF  68
033B:  MOVF   3E,W
033C:  MOVWF  67
033D:  MOVF   3D,W
033E:  MOVWF  66
033F:  CLRF   6D
0340:  MOVLW  40
0341:  MOVWF  6C
0342:  MOVLW  1C
0343:  MOVWF  6B
0344:  MOVLW  8B
0345:  MOVWF  6A
0346:  CALL   033
0347:  MOVF   23,W
0348:  MOVWF  50
0349:  MOVF   22,W
034A:  MOVWF  4F
034B:  MOVF   21,W
034C:  MOVWF  4E
034D:  MOVF   20,W
034E:  MOVWF  4D
034F:  BSF    03.1
0350:  CLRF   6D
0351:  CLRF   6C
0352:  MOVLW  20
0353:  MOVWF  6B
0354:  MOVLW  81
0355:  MOVWF  6A
0356:  MOVF   40,W
0357:  MOVWF  71
0358:  MOVF   3F,W
0359:  MOVWF  70
035A:  MOVF   3E,W
035B:  MOVWF  6F
035C:  MOVF   3D,W
035D:  MOVWF  6E
035E:  CALL   0A8
035F:  MOVF   50,W
0360:  MOVWF  6D
0361:  MOVF   4F,W
0362:  MOVWF  6C
0363:  MOVF   4E,W
0364:  MOVWF  6B
0365:  MOVF   4D,W
0366:  MOVWF  6A
0367:  MOVF   23,W
0368:  MOVWF  71
0369:  MOVF   22,W
036A:  MOVWF  70
036B:  MOVF   21,W
036C:  MOVWF  6F
036D:  MOVF   20,W
036E:  MOVWF  6E
036F:  CALL   1E6
0370:  MOVF   23,W
0371:  MOVWF  44
0372:  MOVF   22,W
0373:  MOVWF  43
0374:  MOVF   21,W
0375:  MOVWF  42
0376:  MOVF   20,W
0377:  MOVWF  41
....................        
....................       //formula para calcular temp con NTC 
....................       y = log(Rx/Ro); 
0378:  MOVF   44,W
0379:  MOVWF  6D
037A:  MOVF   43,W
037B:  MOVWF  6C
037C:  MOVF   42,W
037D:  MOVWF  6B
037E:  MOVF   41,W
037F:  MOVWF  6A
0380:  CLRF   71
0381:  MOVLW  60
0382:  MOVWF  70
0383:  MOVLW  6A
0384:  MOVWF  6F
0385:  MOVLW  8C
0386:  MOVWF  6E
0387:  CALL   1E6
0388:  MOVF   23,W
0389:  MOVWF  50
038A:  MOVF   22,W
038B:  MOVWF  4F
038C:  MOVF   21,W
038D:  MOVWF  4E
038E:  MOVF   20,W
038F:  MOVWF  4D
0390:  MOVF   50,W
0391:  MOVWF  54
0392:  MOVF   4F,W
0393:  MOVWF  53
0394:  MOVF   4E,W
0395:  MOVWF  52
0396:  MOVF   4D,W
0397:  MOVWF  51
*
056E:  MOVF   23,W
056F:  MOVWF  4C
0570:  MOVF   22,W
0571:  MOVWF  4B
0572:  MOVF   21,W
0573:  MOVWF  4A
0574:  MOVF   20,W
0575:  MOVWF  49
....................       y = (1.00/To) + (y *(1.00/B)); 
0576:  MOVF   4C,W
0577:  MOVWF  69
0578:  MOVF   4B,W
0579:  MOVWF  68
057A:  MOVF   4A,W
057B:  MOVWF  67
057C:  MOVF   49,W
057D:  MOVWF  66
057E:  MOVLW  53
057F:  MOVWF  6D
0580:  MOVLW  04
0581:  MOVWF  6C
0582:  MOVLW  69
0583:  MOVWF  6B
0584:  MOVLW  72
0585:  MOVWF  6A
0586:  CALL   033
0587:  BCF    03.1
0588:  MOVLW  0F
0589:  MOVWF  6D
058A:  MOVLW  CF
058B:  MOVWF  6C
058C:  MOVLW  5B
058D:  MOVWF  6B
058E:  MOVLW  76
058F:  MOVWF  6A
0590:  MOVF   23,W
0591:  MOVWF  71
0592:  MOVF   22,W
0593:  MOVWF  70
0594:  MOVF   21,W
0595:  MOVWF  6F
0596:  MOVF   20,W
0597:  MOVWF  6E
0598:  CALL   0A8
0599:  MOVF   23,W
059A:  MOVWF  4C
059B:  MOVF   22,W
059C:  MOVWF  4B
059D:  MOVF   21,W
059E:  MOVWF  4A
059F:  MOVF   20,W
05A0:  MOVWF  49
....................       temp = 1.00/y; 
05A1:  CLRF   6D
05A2:  CLRF   6C
05A3:  CLRF   6B
05A4:  MOVLW  7F
05A5:  MOVWF  6A
05A6:  MOVF   4C,W
05A7:  MOVWF  71
05A8:  MOVF   4B,W
05A9:  MOVWF  70
05AA:  MOVF   4A,W
05AB:  MOVWF  6F
05AC:  MOVF   49,W
05AD:  MOVWF  6E
05AE:  CALL   1E6
05AF:  MOVF   23,W
05B0:  MOVWF  48
05B1:  MOVF   22,W
05B2:  MOVWF  47
05B3:  MOVF   21,W
05B4:  MOVWF  46
05B5:  MOVF   20,W
05B6:  MOVWF  45
....................        
....................       //De kelvins a Celcius 
....................       temp = temp - 273.15; 
05B7:  BSF    03.1
05B8:  MOVF   48,W
05B9:  MOVWF  6D
05BA:  MOVF   47,W
05BB:  MOVWF  6C
05BC:  MOVF   46,W
05BD:  MOVWF  6B
05BE:  MOVF   45,W
05BF:  MOVWF  6A
05C0:  MOVLW  33
05C1:  MOVWF  71
05C2:  MOVLW  93
05C3:  MOVWF  70
05C4:  MOVLW  08
05C5:  MOVWF  6F
05C6:  MOVLW  87
05C7:  MOVWF  6E
05C8:  CALL   0A8
05C9:  MOVF   23,W
05CA:  MOVWF  48
05CB:  MOVF   22,W
05CC:  MOVWF  47
05CD:  MOVF   21,W
05CE:  MOVWF  46
05CF:  MOVF   20,W
05D0:  MOVWF  45
....................        
....................       return temp; 
05D1:  MOVF   45,W
05D2:  MOVWF  20
05D3:  MOVF   46,W
05D4:  MOVWF  21
05D5:  MOVF   47,W
05D6:  MOVWF  22
05D7:  MOVF   48,W
05D8:  MOVWF  23
....................    } 
....................     
....................  
.................... //////////////////////////////// 
....................  
.................... //////////////////////////////// 
.................... int pin = 0;                  // 
.................... int digits[10];               // 
.................... int1 flag=0;                  // 
....................                               // 
.................... #define SEG PIN_C0            // 
.................... #define ERROR flag            // 
....................                               // 
.................... #include "7SEG_2DIG_PB.h"     // 
.................... /*//////////////////////////// 
.................... //							// 
.................... // 7-Segmento de 2 digitos	// 
.................... // por el puerto B 			// 
.................... // *-> pin es el punto 		// 
.................... // decimal. hay que ponerlo	// 
.................... // aparte de esta biblioteca// 
.................... //							// 
.................... // DECLARAR:				// 
.................... // int digits[10];			// 
.................... // int pin = 0;				// 
.................... // #define SEG PIN_X#		// 
.................... // #define ERROR flag#		// 
.................... ////////////////////////////*/ 
....................  
.................... void seg_init(void) 
.................... 	{	  	 
.................... 	   
.................... 	  digits[0] = 0b00111111; 
*
060E:  MOVLW  3F
060F:  MOVWF  2D
....................       digits[1] = 0b00000110; 
0610:  MOVLW  06
0611:  MOVWF  2E
....................       digits[2] = 0b01011011; 
0612:  MOVLW  5B
0613:  MOVWF  2F
....................       digits[3] = 0b01001111; 
0614:  MOVLW  4F
0615:  MOVWF  30
....................       digits[4] = 0b01100110; 
0616:  MOVLW  66
0617:  MOVWF  31
....................       digits[5] = 0b01101101; 
0618:  MOVLW  6D
0619:  MOVWF  32
....................       digits[6] = 0b01111101; 
061A:  MOVLW  7D
061B:  MOVWF  33
....................       digits[7] = 0b00000111; 
061C:  MOVLW  07
061D:  MOVWF  34
....................       digits[8] = 0b01111111; 
061E:  MOVLW  7F
061F:  MOVWF  35
....................       digits[9] = 0b01100111; 
0620:  MOVLW  67
0621:  MOVWF  36
0622:  BCF    0A.3
0623:  GOTO   744 (RETURN)
.................... 	} 
.................... void show( int num ){ 
....................      
....................      if ( num < 10 ) 
*
064C:  MOVF   39,W
064D:  SUBLW  09
064E:  BTFSS  03.0
064F:  GOTO   67D
....................      { 
....................          output_b( 0 | pin ); 
0650:  BSF    03.5
0651:  CLRF   06
0652:  BCF    03.5
0653:  MOVF   2C,W
0654:  MOVWF  06
....................          output_low( SEG ); 
0655:  MOVLW  FC
0656:  BSF    03.5
0657:  MOVWF  07
0658:  BCF    03.5
0659:  BCF    07.0
....................          output_b( digits [ num ] | pin ); 
065A:  MOVLW  2D
065B:  ADDWF  39,W
065C:  MOVWF  04
065D:  MOVF   00,W
065E:  IORWF  2C,W
065F:  MOVWF  3A
0660:  BSF    03.5
0661:  CLRF   06
0662:  BCF    03.5
0663:  MOVF   3A,W
0664:  MOVWF  06
....................          delay_ms( 10 ); 
0665:  MOVLW  0A
0666:  MOVWF  3A
0667:  CALL   624
....................          output_b( 0 | pin ); 
0668:  BSF    03.5
0669:  CLRF   06
066A:  BCF    03.5
066B:  MOVF   2C,W
066C:  MOVWF  06
....................          output_high( SEG );; 
066D:  MOVLW  FC
066E:  BSF    03.5
066F:  MOVWF  07
0670:  BCF    03.5
0671:  BSF    07.0
....................          output_b( digits [ 0 ] | pin ); 
0672:  MOVF   2D,W
0673:  IORWF  2C,W
0674:  MOVWF  3A
0675:  BSF    03.5
0676:  CLRF   06
0677:  BCF    03.5
0678:  MOVF   3A,W
0679:  MOVWF  06
....................          delay_ms( 10 ); 
067A:  MOVLW  0A
067B:  MOVWF  3A
067C:  CALL   624
....................       } 
.................... 	   
....................      if ( num >= 10 && num <= 99 ) 
067D:  MOVF   39,W
067E:  SUBLW  09
067F:  BTFSC  03.0
0680:  GOTO   6BF
0681:  MOVF   39,W
0682:  SUBLW  63
0683:  BTFSS  03.0
0684:  GOTO   6BF
....................      { 
....................          output_b( 0 | pin ); 
0685:  BSF    03.5
0686:  CLRF   06
0687:  BCF    03.5
0688:  MOVF   2C,W
0689:  MOVWF  06
....................          output_low( SEG ); 
068A:  MOVLW  FC
068B:  BSF    03.5
068C:  MOVWF  07
068D:  BCF    03.5
068E:  BCF    07.0
....................          output_b( digits [ num%10 ] | pin ); 
068F:  MOVF   39,W
0690:  MOVWF  3A
0691:  MOVLW  0A
0692:  MOVWF  3B
0693:  CALL   637
0694:  MOVLW  2D
0695:  ADDWF  20,W
0696:  MOVWF  04
0697:  MOVF   00,W
0698:  IORWF  2C,W
0699:  MOVWF  3A
069A:  BSF    03.5
069B:  CLRF   06
069C:  BCF    03.5
069D:  MOVF   3A,W
069E:  MOVWF  06
....................          delay_ms( 10 ); 
069F:  MOVLW  0A
06A0:  MOVWF  3A
06A1:  CALL   624
....................          output_b( 0 | pin); 
06A2:  BSF    03.5
06A3:  CLRF   06
06A4:  BCF    03.5
06A5:  MOVF   2C,W
06A6:  MOVWF  06
....................          output_high( SEG ); 
06A7:  MOVLW  FC
06A8:  BSF    03.5
06A9:  MOVWF  07
06AA:  BCF    03.5
06AB:  BSF    07.0
....................          output_b( digits [ num/10 ] | pin ); 
06AC:  MOVF   39,W
06AD:  MOVWF  3A
06AE:  MOVLW  0A
06AF:  MOVWF  3B
06B0:  CALL   637
06B1:  MOVLW  2D
06B2:  ADDWF  21,W
06B3:  MOVWF  04
06B4:  MOVF   00,W
06B5:  IORWF  2C,W
06B6:  MOVWF  3A
06B7:  BSF    03.5
06B8:  CLRF   06
06B9:  BCF    03.5
06BA:  MOVF   3A,W
06BB:  MOVWF  06
....................          delay_ms( 10 ); 
06BC:  MOVLW  0A
06BD:  MOVWF  3A
06BE:  CALL   624
....................       } 
.................... 	   
.................... 	  if ( num > 99 ) 
06BF:  MOVF   39,W
06C0:  SUBLW  63
06C1:  BTFSC  03.0
06C2:  GOTO   6ED
.................... 	 { 
.................... 		 output_b( 0 | pin ); 
06C3:  BSF    03.5
06C4:  CLRF   06
06C5:  BCF    03.5
06C6:  MOVF   2C,W
06C7:  MOVWF  06
....................          output_low( SEG ); 
06C8:  MOVLW  FC
06C9:  BSF    03.5
06CA:  MOVWF  07
06CB:  BCF    03.5
06CC:  BCF    07.0
....................          output_b( 0b01000000 | pin ); 
06CD:  MOVF   2C,W
06CE:  IORLW  40
06CF:  MOVWF  3A
06D0:  BSF    03.5
06D1:  CLRF   06
06D2:  BCF    03.5
06D3:  MOVF   3A,W
06D4:  MOVWF  06
....................          delay_ms( 10 ); 
06D5:  MOVLW  0A
06D6:  MOVWF  3A
06D7:  CALL   624
....................          output_b( 0 | pin); 
06D8:  BSF    03.5
06D9:  CLRF   06
06DA:  BCF    03.5
06DB:  MOVF   2C,W
06DC:  MOVWF  06
....................          output_high( SEG ); 
06DD:  MOVLW  FC
06DE:  BSF    03.5
06DF:  MOVWF  07
06E0:  BCF    03.5
06E1:  BSF    07.0
....................          output_b( 0b01000000 | pin ); 
06E2:  MOVF   2C,W
06E3:  IORLW  40
06E4:  MOVWF  3A
06E5:  BSF    03.5
06E6:  CLRF   06
06E7:  BCF    03.5
06E8:  MOVF   3A,W
06E9:  MOVWF  06
....................          delay_ms( 10 ); 
06EA:  MOVLW  0A
06EB:  MOVWF  3A
06EC:  CALL   624
.................... 	 } 
.................... 	  
.................... 	 if ( ERROR ) 
06ED:  BTFSS  37.0
06EE:  GOTO   719
.................... 	 { 
.................... 		 output_b( 0 | pin ); 
06EF:  BSF    03.5
06F0:  CLRF   06
06F1:  BCF    03.5
06F2:  MOVF   2C,W
06F3:  MOVWF  06
....................          output_low( SEG ); 
06F4:  MOVLW  FC
06F5:  BSF    03.5
06F6:  MOVWF  07
06F7:  BCF    03.5
06F8:  BCF    07.0
....................          output_b( 0b01000000 | pin ); 
06F9:  MOVF   2C,W
06FA:  IORLW  40
06FB:  MOVWF  3A
06FC:  BSF    03.5
06FD:  CLRF   06
06FE:  BCF    03.5
06FF:  MOVF   3A,W
0700:  MOVWF  06
....................          delay_ms( 200 ); 
0701:  MOVLW  C8
0702:  MOVWF  3A
0703:  CALL   624
....................          output_b( 0 | pin); 
0704:  BSF    03.5
0705:  CLRF   06
0706:  BCF    03.5
0707:  MOVF   2C,W
0708:  MOVWF  06
....................          output_high( SEG ); 
0709:  MOVLW  FC
070A:  BSF    03.5
070B:  MOVWF  07
070C:  BCF    03.5
070D:  BSF    07.0
....................          output_b( 0b01000000 | pin ); 
070E:  MOVF   2C,W
070F:  IORLW  40
0710:  MOVWF  3A
0711:  BSF    03.5
0712:  CLRF   06
0713:  BCF    03.5
0714:  MOVF   3A,W
0715:  MOVWF  06
....................          delay_ms( 200 ); 
0716:  MOVLW  C8
0717:  MOVWF  3A
0718:  CALL   624
.................... 	 } 
0719:  BCF    0A.3
071A:  GOTO   747 (RETURN)
.................... } 
....................  
.................... //////////////////////////////// 
....................  
.................... int a=0; 
....................  
.................... //#define T_MAX 90 
.................... //#define T_MIN 70 
....................  
.................... #INT_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
....................    SET_ADC_CHANNEL(0); 
*
02D5:  MOVLW  00
02D6:  MOVWF  21
02D7:  MOVF   1F,W
02D8:  ANDLW  C7
02D9:  IORWF  21,W
02DA:  MOVWF  1F
....................    delay_us(50); 
02DB:  MOVLW  20
02DC:  MOVWF  20
02DD:  DECFSZ 20,F
02DE:  GOTO   2DD
02DF:  GOTO   2E0
02E0:  NOP
....................    a = (int8)(getTempCelsius()); 
*
05D9:  MOVF   23,W
05DA:  MOVWF  40
05DB:  MOVF   22,W
05DC:  MOVWF  3F
05DD:  MOVF   21,W
05DE:  MOVWF  3E
05DF:  MOVF   20,W
05E0:  MOVWF  3D
*
05FF:  MOVF   21,W
0600:  MOVWF  38
....................     
....................    //if( a >= T_MAX ) output_high(PIN_C1); 
....................    //if( a <= T_MIN ) output_low (PIN_C1); 
....................     
....................    if( a > 99 || a <= 0 )  
0601:  MOVF   38,W
0602:  SUBLW  63
0603:  BTFSS  03.0
0604:  GOTO   608
0605:  MOVF   38,F
0606:  BTFSS  03.2
0607:  GOTO   60A
....................       { 
....................          flag = 1; 
0608:  BSF    37.0
....................          //output_high(PIN_C1); 
....................       } 
0609:  GOTO   60B
....................    else flag=0; 
060A:  BCF    37.0
060B:  BCF    0C.0
060C:  BCF    0A.3
060D:  GOTO   020
.................... } 
....................  
.................... void main() 
*
071B:  MOVF   03,W
071C:  ANDLW  1F
071D:  MOVWF  03
071E:  MOVLW  0C
071F:  BSF    03.5
0720:  MOVWF  19
0721:  MOVLW  A2
0722:  MOVWF  18
0723:  MOVLW  90
0724:  BCF    03.5
0725:  MOVWF  18
0726:  CLRF   2C
0727:  BCF    37.0
0728:  CLRF   38
0729:  BSF    03.5
072A:  BSF    1F.0
072B:  BSF    1F.1
072C:  BSF    1F.2
072D:  BCF    1F.3
072E:  MOVLW  07
072F:  MOVWF  1C
.................... { 
....................    setup_adc_ports(AN0_AN1_AN3); 
0730:  BCF    1F.0
0731:  BCF    1F.1
0732:  BSF    1F.2
0733:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
0734:  BCF    1F.6
0735:  BCF    03.5
0736:  BSF    1F.6
0737:  BSF    1F.7
0738:  BSF    03.5
0739:  BSF    1F.7
073A:  BCF    03.5
073B:  BSF    1F.0
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);      //262 ms overflow 
073C:  MOVLW  B5
073D:  MOVWF  10
....................  
....................     
....................     
....................    enable_interrupts(INT_TIMER1); 
073E:  BSF    03.5
073F:  BSF    0C.0
....................    enable_interrupts(GLOBAL); 
0740:  MOVLW  C0
0741:  BCF    03.5
0742:  IORWF  0B,F
....................     
....................    seg_init(); 
0743:  GOTO   60E
....................     
....................    while(TRUE) 
....................    { 
....................       show(a); 
0744:  MOVF   38,W
0745:  MOVWF  39
0746:  GOTO   64C
0747:  GOTO   744
....................    } 
....................  
.................... } 
....................  
0748:  SLEEP
....................  

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
